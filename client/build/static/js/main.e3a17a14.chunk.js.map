{"version":3,"sources":["fetch/common.ts","fetch/user.ts","components/user/Register.tsx","redux/actions/userActions.ts","components/user/Login.tsx","fetch/categories.ts","redux/actions/categoryActions.ts","redux/actions/errorActions.ts","redux/actions/successActions.ts","validation.ts","components/categories/CategoryForm.tsx","fetch/transactions.ts","components/categories/ListRow.tsx","components/categories/CategoryList.tsx","redux/actions/bannerActions.ts","components/categories/Categories.tsx","redux/actions/infoActions.ts","hooks/useFetchTransactions.ts","redux/actions/transactionActions.ts","components/dashboard/DateFilter.tsx","hooks/useUpdateEffect.ts","redux/actions/dateFilterActions.ts","components/dashboard/graphParse.ts","components/dashboard/Graph.tsx","components/dashboard/SummaryElement.tsx","components/dashboard/summaryParse.ts","components/dashboard/SummaryPanels.tsx","components/dashboard/Dashboard.tsx","components/info/ErrorToolbar.tsx","components/info/InfoToolbar.tsx","components/info/SuccessToolbar.tsx","components/reports/Reports.tsx","components/transactions/TransactionButtons.tsx","redux/actions/transactionCheckboxActions.ts","components/transactions/RowDropdown.tsx","components/transactions/TransactionsForm.tsx","components/transactions/TransactionsHeader.tsx","components/transactions/TransactionsRow.tsx","components/transactions/TransactionsList.tsx","components/transactions/TransactionsSearch.tsx","components/transactions/Transactions.tsx","components/window/Banner.tsx","components/window/NavButton.tsx","components/window/NavigationBar.tsx","App.tsx","hooks/useFetchCategories.ts","AuthWrapper.tsx","redux/reducers/bannerReducer.ts","redux/reducers/categoryReducer.ts","redux/reducers/dateFilterReducer.ts","redux/reducers/errorReducer.ts","redux/reducers/infoReducer.ts","redux/reducers/loadingReducer.ts","redux/reducers/successReducer.ts","redux/reducers/transactionCheckboxReducer.ts","redux/reducers/transactionReducer.ts","redux/reducers/userReducer.ts","redux/reducers/index.ts","reportWebVitals.ts","index.tsx"],"names":["handleResponse","response","a","ok","json","body","Error","error","sendLoginRequest","user","fetch","method","mode","headers","JSON","stringify","password","username","then","res","catch","err","message","sendRegisterRequest","theme","createTheme","Register","history","useHistory","useState","showError","setShowError","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","sx","alignItems","display","flexDirection","marginTop","Avatar","m","bgcolor","Typography","variant","noValidate","onSubmit","event","preventDefault","data","FormData","currentTarget","get","push","console","mt","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","name","autoComplete","type","Button","mb","justifyContent","to","setUserLoggedIn","payload","Login","dispatch","useDispatch","showLoginFailed","setShowLoginFailed","handleSubmit","localStorage","setItem","token","isLoggedIn","margin","autoFocus","FormControlLabel","control","Checkbox","value","color","addToDatabase","getItem","removeFromDatabase","categoryId","getData","defaultNone","budget","_id","defaultPayload","category_id","newCategory","allCategories","incomeCategories","expenseCategories","noneCategory","addCategory","isIncomeCategory","title","hideError","showSuccess","categoryFormSchema","yup","positive","integer","min","max","transactionFormSchema","amount","test","date","description","useStyles","makeStyles","root","padding","width","height","formLayout","errorText","fontSize","buttonLayout","textFields","incomeButton","backgroundColor","expensesButton","CategoryForm","classes","showInputError","setShowInputError","setIsIncomeCategory","state","setState","e","validate","addedItem","setTimeout","handleInput","target","useEffect","className","boxShadow","onChange","onClick","handleCsvExport","blob","link","document","createElement","href","URL","createObjectURL","download","Date","toISOString","split","click","revokeObjectURL","handleTransactionsDelete","checkedTransactions","addTransactionToDatabase","newTransaction","handleCategoryUpdate","newCategoryId","transactionId","url","concat","updateTransactionCategories","oldCategoryId","dontDisplay","ListRow","props","showButton","setShowButton","element","useSelector","categoryReducer","handleElementDelete","ListItem","button","onMouseEnter","onMouseLeave","ListItemText","primary","startIcon","background","CategoryList","listTitle","listArr","List","Divider","map","renderRows","defaultProps","setBannerTitle","Categories","bannerTitle","md","showInfo","status","useFetchTransactions","setData","transactionsList","length","allTransactions","transactionName","updateTransactionsCategory","loadTransactions","filterTransactions","transactions","startDate","endDate","startDateMs","getTime","endDateMs","filter","transaction","transactionDate","transactionDateMs","isInDateRange","DateFilter","addDays","key","callback","dependencies","firstRenderRef","useRef","current","useUpdateEffect","endDateISO","startDateISO","weekStartsOn","ranges","selection","mapTransactionsAmountsToGDO","mappedCategories","category","pv","uv","mapCategoriesToGDO","forEach","handleAmountFormat","categoryKey","i","graphDataObject","chartCategoryExpenseTotal","entry","parseFloat","Math","abs","toFixed","Graph","getDataForGraph","transactionReducer","ResponsiveContainer","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","border","borderWidth","borderColor","textAlign","SummaryElement","icon","text","Card","elevation","gutterBottom","parseTransactionAmounts","income","expenses","savings","handleIncomeTransaction","expense","replace","handleExpenseTransaction","alignContent","marginRight","SummaryPanels","budgetTotal","parseExpenseCategories","getSummaryData","header","marginBottom","Dashboard","ErrorToolbar","errorReducer","Alert","severity","action","IconButton","size","AlertTitle","InfoToolbar","infoReducer","SuccessToolbar","successReducer","Reports","files","append","newItems","statusText","TransactionButtons","transactionCheckboxReducer","accept","style","handleFileSelected","htmlFor","disabled","deleteTransaction","RowDropdown","handleChange","currentCategory","currentCategoryId","setCurrentCategoryId","renderOptions","categories","FormControl","Select","native","dropdown","gridItem","field","TransactionsForm","rootstate","parsedAmount","convertedDate","encType","TransactionsHeader","checked","checkAll","prev","TransactionsRow","isThisChecked","setIsThisChecked","toLocaleDateString","month","day","year","unCheckTransaction","isAllChecked","TransactionsList","isChecked","setIsChecked","searchBar","searchIcon","alignSelf","TransactionsSearch","searchInput","setSearchInput","Transactions","buttons","Banner","userReducer","bannerReducer","removeItem","borderRadius","NavButton","textDecoration","NavigationBar","boxSizing","frameStyles","content","App","useTitle","setIncomeCategories","setExpenseCategories","setNoneCategory","categoryError","useFetchCategories","exact","path","AuthWrapper","resp","tokenValid","isTokenValid","initialState","dateFilterReducer","loadingReducer","loading","transactionIds","storedTransactionId","defaultState","allReducers","combineReducers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e3a17a14.chunk.js","sourcesContent":["/**\r\n * Handles response by returning body of response if OK is returned in headers\r\n * otherwise extracts errormessage from the body and throws error with that message instead\r\n * @param response\r\n */\r\nexport const handleResponse = async (response: any): Promise<any> => {\r\n    if (!response.ok) {\r\n        const body = await response.json();\r\n        throw Error(body.error);\r\n    }\r\n    return await response.json();\r\n};\r\n","import {handleResponse} from \"./common\";\r\n\r\ninterface User {\r\n    username: string;\r\n    password: string;\r\n}\r\nexport const sendLoginRequest = async (user: User) => {\r\n    return await fetch(\"/login\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n            password: user.password,\r\n            username: user.username,\r\n        }),\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n\r\nexport const sendRegisterRequest = async (user: User) => {\r\n    return await fetch(\"/register\", {\r\n        body: JSON.stringify(user),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n","import LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Container from \"@mui/material/Container\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {sendRegisterRequest} from \"../../fetch/user\";\r\n\r\ninterface User {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nconst theme = createTheme();\r\nconst Register = () => {\r\n    const history = useHistory();\r\n    const [showError, setShowError] = useState(false);\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        sendRegisterRequest({\r\n            password: data.get(\"password\") as string,\r\n            username: data.get(\"username\") as string,\r\n        }).then(() => {\r\n            // registration successful\r\n            history.push(\"/login\");\r\n        }).catch((err: Error) => {\r\n            // registration fail\r\n            console.error(`Registration failed. Reason: ${err.message}`);\r\n            setShowError(true);\r\n        });\r\n    };\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <Box\r\n                    sx={{\r\n                        alignItems: \"center\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        marginTop: 8,\r\n                    }}\r\n                >\r\n                    <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign up\r\n                    </Typography>\r\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    error={showError}\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Username\"\r\n                                    name=\"username\"\r\n                                    autoComplete=\"username\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    error={showError}\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 2 }}\r\n                        >\r\n                            Sign Up\r\n                        </Button>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Grid item>\r\n                                <Link to=\"/login\">\r\n                                    Already have an account? Sign in\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import {Action, Payload} from \"../../../@types/UserTypes\";\r\n\r\nexport const getUserStatus = (): Action => {\r\n    return {\r\n        type: \"GET_USER_STATUS\",\r\n        payload: {username: \"\", isLoggedIn: false},\r\n    };\r\n};\r\n\r\nexport const setUserLoggedIn = (payload: Payload): Action => {\r\n    return {\r\n        type: \"SET_USER_LOGGED_IN\",\r\n        payload\r\n    };\r\n};\r\n\r\nexport const setUserLoggedOut = (): Action => {\r\n    return {\r\n        type: \"SET_USER_LOGGED_OUT\",\r\n        payload: {username: \"\", isLoggedIn: false},\r\n    };\r\n};\r\n","import Avatar from \"@mui/material/Avatar\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Container from \"@mui/material/Container\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {createTheme, ThemeProvider} from \"@mui/material/styles\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {sendLoginRequest} from \"../../fetch/user\";\r\nimport {setUserLoggedIn} from \"../../redux/actions/userActions\";\r\n\r\nconst theme = createTheme();\r\nconst Login = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [showLoginFailed, setShowLoginFailed] = useState(false);\r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        await sendLoginRequest({\r\n            password: data.get(\"password\") as string,\r\n            username: data.get(\"username\") as string,\r\n        }).then((res: any) => {\r\n            localStorage.setItem(\"token\", res.token);\r\n            dispatch(setUserLoggedIn({username: res.username, isLoggedIn: true}));\r\n            setShowLoginFailed(false);\r\n            history.push(\"/\");\r\n            return;\r\n        }).catch((err: Error) => {\r\n            setShowLoginFailed(true);\r\n            return;\r\n        });\r\n    };\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <Box\r\n                    sx={{\r\n                        alignItems: \"center\",\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        marginTop: 8,\r\n                    }}\r\n                >\r\n                    <Avatar sx={{m: 1, bgcolor: \"secondary.main\"}}>\r\n                        {/*<LockOutlinedIcon />*/}\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign in\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{mt: 1}}>\r\n                        <TextField\r\n                            error={showLoginFailed}\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Username\"\r\n                            name=\"username\"\r\n                            autoComplete=\"username\"\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            error={showLoginFailed}\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                            label=\"Remember me\"\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{mt: 3, mb: 2}}\r\n                        >\r\n                            Sign In\r\n                        </Button>\r\n                        <Grid container>\r\n                            <Grid item xs>\r\n                                <Link to=\"#\">\r\n                                    Forgot password?\r\n                                </Link>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Link to=\"/register\">\r\n                                    {\"Don't have an account? Sign Up\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import {Category} from \"../../@types/CategoryTypes/category\";\r\nimport {handleResponse} from \"./common\";\r\n\r\n// CategoryForm.tsx\r\ninterface CategoryAddRes {\r\n    status: number;\r\n    statusText: string;\r\n    addedItem: Category;\r\n}\r\n\r\ninterface FormPayload {\r\n    name: string;\r\n    budget: number;\r\n    type: string;\r\n}\r\n\r\ninterface TextResponse {\r\n    statusText: string;\r\n}\r\n\r\nexport const addToDatabase = async (data: FormPayload): Promise<CategoryAddRes> =>\r\n    await fetch(\"/categories/new\", {\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n\r\n// ListRow.tsx\r\nexport const removeFromDatabase = async (categoryId: string): Promise<TextResponse> => {\r\n    return await fetch(`categories/delete/${categoryId}`, {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n        method: \"DELETE\",\r\n        mode: \"cors\",\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n\r\nexport const getData = async () =>\r\n    await fetch(\"categories/show\", {\r\n        headers: {\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n","import type {Action, Category, categoryState, Payload} from \"../../../@types/CategoryTypes/category\";\r\n\r\nconst defaultNone: Category = {\r\n    type: \"\",\r\n    name: \"\",\r\n    budget: 0,\r\n    _id: \"\",\r\n};\r\n\r\nconst defaultPayload: Payload = {\r\n    category_id: \"\",\r\n    newCategory: defaultNone,\r\n    allCategories: {\r\n        incomeCategories: [],\r\n        expenseCategories: [],\r\n        noneCategory: defaultNone,\r\n    },\r\n};\r\n\r\nexport const getCategories = (): Action => {\r\n    return {\r\n        type: \"GET_CATEGORIES\",\r\n        payload: {...defaultPayload},\r\n    };\r\n};\r\n\r\nexport const loadCategories = (allCategories: categoryState): Action => {\r\n    return {\r\n        type: \"LOAD_CATEGORIES\",\r\n        payload: {\r\n            ...defaultPayload,\r\n            allCategories: {...allCategories},\r\n        },\r\n    };\r\n};\r\n\r\nexport const deleteCategory = (category_id: string): Action => {\r\n    return {\r\n        type: \"DELETE_CATEGORY\",\r\n        payload: {\r\n            ...defaultPayload,\r\n            category_id,\r\n        },\r\n    };\r\n};\r\n\r\nexport const addCategory = (newCategory: Category, isIncomeCategory: boolean): Action => {\r\n    const type = isIncomeCategory ? \"ADD_INCOME_CATEGORY\" : \"ADD_EXPENSE_CATEGORY\";\r\n    return {\r\n        type,\r\n        payload: {\r\n            ...defaultPayload,\r\n            newCategory,\r\n        },\r\n    };\r\n};\r\n","import {Action} from \"../../../@types/Info/Error\";\r\n\r\nconst defaultPayload = {\r\n    title: null,\r\n    message: null,\r\n};\r\n\r\nexport const showError = (title: string, message: string): Action => {\r\n    return {\r\n        type: \"SHOW_ERROR\",\r\n        payload: {\r\n            title,\r\n            message,\r\n        },\r\n    };\r\n};\r\n\r\nexport const hideError = (): Action => {\r\n    return {\r\n        type: \"HIDE_ERROR\",\r\n        payload: defaultPayload,\r\n    };\r\n};\r\n","import { Action } from \"../../../@types/Info/Success\";\r\n\r\nexport const showSuccess = (message: string): Action => {\r\n    return {\r\n        type: \"SHOW_SUCCESS\",\r\n        payload: {\r\n            message,\r\n        },\r\n    };\r\n};\r\n\r\nexport const hideSuccess = (): Action => {\r\n    return {\r\n        type: \"HIDE_SUCCESS\",\r\n        payload: {\r\n            message: \"\",\r\n        },\r\n    };\r\n};\r\n","import * as yup from \"yup\";\r\n\r\nexport const categoryFormSchema = yup.object({\r\n    budget: yup.number().positive().integer().required(),\r\n    name: yup.string().min(1).max(20).required(),\r\n});\r\n\r\nexport const transactionFormSchema = yup.object({\r\n    amount: yup.number().positive().required()\r\n        .test(\r\n            \"Decimal\",\r\n            \"Amount must be int or decimal with max precision 2\",\r\n            // @ts-ignore\r\n            (amount: string) => {\r\n                return /^\\d+(\\.\\d{1,2})?$/.test(amount);\r\n            }),\r\n    date: yup.date().required(),\r\n    description: yup.string().min(1).max(60).required(),\r\n    name: yup.string().min(1).max(40).required(),\r\n});\r\n","import {Box, Button, makeStyles, TextField} from \"@material-ui/core\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addToDatabase} from \"../../fetch/categories\";\r\nimport {addCategory} from \"../../redux/actions/categoryActions\";\r\nimport {showError} from \"../../redux/actions/errorActions\";\r\nimport {hideSuccess, showSuccess} from \"../../redux/actions/successActions\";\r\nimport {categoryFormSchema} from \"../../validation\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: \"1rem\",\r\n        width: \"100%\",\r\n        height: \"8rem\",\r\n    }, formLayout: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    }, errorText: {\r\n        color: \"red\",\r\n        fontSize: \"0.8rem\",\r\n    }, buttonLayout: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        padding: \"1rem\",\r\n        justifyContent: \"space-between\",\r\n        width: \"8rem\",\r\n    }, textFields: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    }, incomeButton: {\r\n        backgroundColor: \"green\",\r\n    }, expensesButton: {\r\n        backgroundColor: \"red\",\r\n    },\r\n});\r\n\r\nconst CategoryForm: React.FC = () => {\r\n    const classes = useStyles();\r\n    const [showInputError, setShowInputError] = useState(false);\r\n    const [isIncomeCategory, setIsIncomeCategory] = useState(true);\r\n    const [state, setState] = useState({\r\n        budget: 1,\r\n        name: \"\",\r\n        type: \"\",\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCategoryChange = () => {\r\n        setIsIncomeCategory(!isIncomeCategory);\r\n    };\r\n\r\n    const handleSubmit = async (e: any) => {\r\n        e.preventDefault();\r\n        const {name, budget, type} = state;\r\n        try {\r\n            await categoryFormSchema.validate({name, budget});\r\n        } catch (err: any) {\r\n            console.error(err.message);\r\n            setShowInputError(true);\r\n            return;\r\n        }\r\n        if (showInputError) { setShowInputError(false); }\r\n        addToDatabase({name, budget, type})\r\n            .then((res) => {\r\n                dispatch(addCategory(res.addedItem, isIncomeCategory));\r\n                dispatch(showSuccess(`New category added.`));\r\n                setTimeout(() => {\r\n                    dispatch(hideSuccess());\r\n                }, 4000);\r\n            }).catch((err: Error) => {\r\n            dispatch(showError(`Couldn't make API request.`, err.message));\r\n        });\r\n\r\n        // clear state value after sending data\r\n        setState({\r\n            budget: 1,\r\n            name: \"\",\r\n            type: \"\",\r\n        });\r\n    };\r\n    const handleInput = (e: any) => {\r\n        // dynamic state update based on input in textfield\r\n        if (e.target !== null) {\r\n            if (e.target.name === \"categoryNameField\") {\r\n                setState({...state, name: e.target.value});\r\n            } else {\r\n                // this regex checks if value contains only numbers\r\n                if (/^\\d+$/.test(e.target.value) || e.target.value === \"\") {\r\n                    setState({...state, budget: e.target.value});\r\n                    if (showInputError) {\r\n                        setShowInputError(false);\r\n                    }\r\n                } else {\r\n                    if (e.target.value !== \"\") {\r\n                        setShowInputError(true);\r\n                    }\r\n                    setState({...state, budget: e.target.value});\r\n                }\r\n            }\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        const type = isIncomeCategory ? \"INCOME\" : \"EXPENSE\";\r\n        setState({...state, type});\r\n    }, [isIncomeCategory]);\r\n    return (\r\n        <Box className={classes.root} boxShadow={4}>\r\n            <form onSubmit={handleSubmit} className={classes.formLayout}>\r\n                <div className={classes.textFields}>\r\n                    <TextField\r\n                        error={showInputError}\r\n                        label=\"Category Name\"\r\n                        name=\"categoryNameField\"\r\n                        value={state.name}\r\n                        onChange={handleInput}/>\r\n\r\n                    {!isIncomeCategory &&\r\n                        <TextField\r\n                            error={showInputError}\r\n                            label=\"Monthly Budget (€)\"\r\n                            name=\"budgetValueField\"\r\n                            value={state.budget}\r\n                            onChange={handleInput}/>}\r\n                </div>\r\n                <div className={classes.buttonLayout}>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\">Add</Button>\r\n\r\n                    <Button\r\n                        className={isIncomeCategory ? classes.incomeButton : classes.expensesButton}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleCategoryChange}>\r\n                        {isIncomeCategory ? \"Income\" : \"Expense\"}\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CategoryForm;\r\n","import {Transaction} from \"../../@types/TransactionTypes/Transaction\";\r\nimport {handleResponse} from \"./common\";\r\n/**\r\n * Tells the API to bundle current stored Transactions to CSV format and send it to the client.\r\n * Client waits for the data and then downloads it as a .csv file.\r\n */\r\nexport const handleCsvExport = async (): Promise<void> => {\r\n    return await fetch(\"transactions/export\", {\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n    }).then(async (res: Response) => {\r\n        const blob = await res.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = \"exported_\" + new Date().toISOString().split(\"T\")[0] + \".csv\";\r\n        link.click();\r\n        setTimeout(() => URL.revokeObjectURL(link.href), 0);\r\n    });\r\n};\r\n\r\ninterface IDeleteTransaction {\r\n    allTransactions: Transaction[];\r\n    statusText: string;\r\n}\r\n\r\n/**\r\n * Delete all Transactions that correspond to the _id values in checkedTransactions array\r\n * @param checkedTransactions Array of Transaction _id's\r\n * @param dispatch Dispatch function to display success/error tooltips\r\n */\r\nexport const handleTransactionsDelete = async (checkedTransactions: string[]): Promise<IDeleteTransaction> => {\r\n    return await fetch(\"transactions/delete\", {\r\n        body: JSON.stringify(checkedTransactions),\r\n        method: \"DELETE\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n\r\nexport const addTransactionToDatabase = async (newTransaction: any) => {\r\n    return await fetch(\"/transactions/new\", {\r\n        body: JSON.stringify(newTransaction),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n\r\n/**\r\n * Find the transaction.name value based on transactionId, then find all transactions\r\n * that have the same name value and update their transaction.category field to reference\r\n * the new category Id.\r\n * @param newCategoryId The _id value of the category that is applied to Transaction\r\n * @param transactionId The _id of Transaction that was modified.\r\n */\r\nexport const handleCategoryUpdate = async (newCategoryId: string, transactionId: string) => {\r\n    const url = \"/transactions/update/\".concat(transactionId);\r\n    return await fetch(url, {\r\n        method: \"PUT\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n        body: JSON.stringify({newCategoryId}),\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n\r\n/**\r\n * Update Transactions that have same categories assigned to them.\r\n * @param newCategoryId\r\n * @param oldCategoryId\r\n */\r\nexport const updateTransactionCategories = async (newCategoryId: string, oldCategoryId: string) => {\r\n    await fetch(\"/transactions/updatecategories/\".concat(oldCategoryId), {\r\n        method: \"PUT\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n        body: JSON.stringify({newCategoryId}),\r\n    }).then(handleResponse)\r\n        .then((res: any) => res)\r\n        .catch((err: Error) => {\r\n            throw new Error(err.message);\r\n        });\r\n};\r\n","import {Button, ListItem, ListItemText, makeStyles} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport type {Category} from \"../../../@types/CategoryTypes/category\";\r\nimport {removeFromDatabase} from \"../../fetch/categories\";\r\nimport {updateTransactionCategories} from \"../../fetch/transactions\";\r\nimport {deleteCategory} from \"../../redux/actions/categoryActions\";\r\nimport {showError} from \"../../redux/actions/errorActions\";\r\nimport {hideSuccess, showSuccess} from \"../../redux/actions/successActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst useStyles = makeStyles({\r\n    display: {\r\n        display: \"flex\",\r\n    }, dontDisplay: {\r\n        display: \"none\",\r\n    },\r\n});\r\n\r\ninterface IProps {\r\n    element: Category;\r\n    key: string; // for React list rendering purposes\r\n}\r\n\r\nconst ListRow: React.FC<IProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [showButton, setShowButton] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const {name, _id} = props.element;\r\n    const {noneCategory} = useSelector((state: RootState) => state.categoryReducer);\r\n    const handleElementDelete = async () => {\r\n        await updateTransactionCategories(noneCategory._id, _id)\r\n            .then(async () => {\r\n                await removeFromDatabase(_id)\r\n                    .then( () => {\r\n                        dispatch(deleteCategory(_id));\r\n                        dispatch(showSuccess(`Item deleted and transactions updated!`));\r\n                        setTimeout(() => hideSuccess(), 4000);\r\n                }).catch((err: Error) => {\r\n                        dispatch(showError(`Could not remove category.`, err.message));\r\n                    });\r\n            }).catch((err: Error) => {\r\n                dispatch(showError(`Could not change transactions' category to NONE`, err.message));\r\n            });\r\n    };\r\n    return (\r\n        <ListItem button\r\n                  onMouseEnter={() => setShowButton(true)}\r\n                  onMouseLeave={() => setShowButton(false)}>\r\n            <ListItemText primary={name}/>\r\n            <Button\r\n                className={showButton ? classes.display : classes.dontDisplay}\r\n                onClick={handleElementDelete}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                startIcon={<DeleteIcon/>}\r\n            >\r\n                Delete\r\n            </Button>\r\n\r\n        </ListItem>);\r\n};\r\n\r\nexport default ListRow;\r\n","import { Box, Divider, List, ListItem, ListItemText, makeStyles } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { hideInfo, showInfo } from \"src/redux/actions/infoActions\";\r\nimport { Category } from \"../../../@types/CategoryTypes/category\";\r\nimport {hideError, showError} from \"../../redux/actions/errorActions\";\r\nimport ListRow from \"./ListRow\";\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        background: \"linear-gradient(180deg , #3f51b5 30%, rgb(0 0 0 / 0%) 100%)\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    listTitle: string;\r\n    listArr: Category[];\r\n}\r\n\r\nconst CategoryList: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n    const {listTitle, listArr} = props;\r\n    const dispatch = useDispatch();\r\n\r\n    const renderRows = () => {\r\n        try {\r\n            return listArr.map((element) => {\r\n                return (<ListRow\r\n                    element={element}\r\n                    key={element._id} />);\r\n            });\r\n        } catch (err: any) {\r\n            dispatch(showError(\"Rendering categories failed.\", err.message));\r\n            setTimeout(() => {dispatch(hideError()); }, 4000);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemText primary={listTitle} />\r\n                </ListItem>\r\n                <Divider />\r\n\r\n                {renderRows()}\r\n\r\n            </List>\r\n        </Box>\r\n    );\r\n};\r\n\r\nCategoryList.defaultProps = {\r\n    listTitle: \"List title unset\",\r\n};\r\n\r\nexport default CategoryList;\r\n","interface Payload{\r\n    bannerTitle: string;\r\n}\r\ninterface Action {\r\n    type: string;\r\n    payload: Payload;\r\n}\r\nexport const setBannerTitle = (payload: Payload): Action => {\r\n    return {\r\n        payload,\r\n        type: \"SET_BANNER_TITLE\",\r\n    };\r\n};\r\n","import { Grid } from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport CategoryForm from \"./CategoryForm\";\r\nimport CategoryList from \"./CategoryList\";\r\nimport {useEffect} from \"react\";\r\nimport {setBannerTitle} from \"../../redux/actions/bannerActions\";\r\n\r\nconst Categories: React.FC = () => {\r\n    const {\r\n        incomeCategories,\r\n        expenseCategories } = useSelector((state: RootState) => state.categoryReducer);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setBannerTitle({bannerTitle: \"Categories\"}));\r\n    }, []);\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} md={12}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} md={6}>\r\n                        <CategoryForm />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n                <CategoryList\r\n                listTitle=\"Income Categories\"\r\n                listArr={incomeCategories}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n                <CategoryList\r\n                listTitle=\"Expenses Categories\"\r\n                listArr={expenseCategories} />\r\n            </Grid>\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Categories;\r\n","interface Action {\r\n    type: string;\r\n    payload: string;\r\n}\r\nexport const showInfo = (message: string): Action => {\r\n    return {\r\n        type: \"SHOW_INFO\",\r\n        payload: message,\r\n    };\r\n};\r\n\r\nexport const hideInfo = (): Action => {\r\n    return {\r\n        type: \"HIDE_INFO\",\r\n        payload: \"\",\r\n    };\r\n};\r\n","import {useEffect, useState} from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {hideInfo, showInfo} from \"src/redux/actions/infoActions\";\r\nimport { Transaction } from \"../../@types/TransactionTypes/Transaction\";\r\n\r\nconst getData = async (): Promise<FetchReturn> =>\r\n    await fetch(\"transactions/show\", {\r\n        headers: {\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n    })\r\n        .then((res: any) => {\r\n            if (res.status === 200) {\r\n                return res.json();\r\n            } else if (res.status === 500) {\r\n                throw new Error(res.error);\r\n            }\r\n            throw new Error(\"Unknown request status code.\");\r\n        }).catch((err) => { throw new Error(err.message); });\r\n\r\ninterface FetchReturn {\r\n    transactionsList: Transaction[];\r\n    error: boolean;\r\n}\r\n\r\n/**\r\n * Fetches all transactions currently stored in the database\r\n * @returns Object transactionsList - array of all transaction objects and error boolean\r\n */\r\nexport const useFetchTransactions = (): FetchReturn => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState<Transaction[]>([]);\r\n    let error = false;\r\n\r\n    useEffect( () => {\r\n        async function fetch() {\r\n            await getData().then( (res) => {\r\n                    if (res.transactionsList.length === 0) {\r\n                        dispatch(showInfo(\"Did not find any transactions in the database.\"));\r\n                        setTimeout(() => dispatch(hideInfo()), 4000);\r\n                    }\r\n                    setData([...res.transactionsList]);\r\n                }).catch((err: Error) => {\r\n                    error = true;\r\n                });\r\n        }\r\n        fetch();\r\n    }, []);\r\n    return {transactionsList: data, error};\r\n};\r\n","import {ITransactionAction, ITransactionPayload, Transaction} from \"../../../@types/TransactionTypes/Transaction\";\r\n\r\nconst payload: ITransactionPayload = {\r\n    allTransactions: [],\r\n    newCategoryId: \"\",\r\n    transactionName: \"\",\r\n};\r\n\r\n/**\r\n * Returns the current transactions state.\r\n */\r\nexport const getTransactions = (): ITransactionAction => {\r\n    return {\r\n        type: \"GET_TRANSACTIONS\",\r\n        payload: {...payload},\r\n    };\r\n};\r\n\r\n// transactionIdentifier - name field of transactions that we want to change\r\n// newCategoryId - id of the new category that was applied to the corresponding transactions\r\n/**\r\n * @param transactionName Name of transactions' we want to change. Matches against every record in database.\r\n * @param newCategoryId _id of the Category record that we want to apply to the chosen transactions.\r\n */\r\nexport const updateTransactionsCategory = (transactionName: string, newCategoryId: string): ITransactionAction => {\r\n    return {\r\n        type: \"UPDATE_TRANSACTIONS_CAT\",\r\n        payload: {\r\n            ...payload,\r\n            transactionName,\r\n            newCategoryId,\r\n        },\r\n    };\r\n};\r\n/**\r\n * Add new transactions to the state.\r\n * @param allTransactions Array of transaction objects that we want to add to the state.\r\n */\r\nexport const loadTransactions = (allTransactions: Transaction[]): ITransactionAction => {\r\n    return {\r\n        type: \"LOAD_TRANSACTIONS\",\r\n        payload: {\r\n            ...payload,\r\n            allTransactions,\r\n        },\r\n    };\r\n};\r\n\r\nexport const appendTransaction = (addedItem: Transaction[]) => {\r\n    return {\r\n        payload: {\r\n            ...payload,\r\n            addedItem,\r\n        },\r\n        type: \"APPEND_TRANSACTION\",\r\n    };\r\n};\r\n","import {addDays} from \"date-fns/esm\";\r\nimport { useState } from \"react\";\r\nimport {DateRangePicker} from \"react-date-range\";\r\nimport \"react-date-range/dist/styles.css\"; // main style file\r\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changeDateRange } from \"src/redux/actions/dateFilterActions\";\r\nimport {ITransactionState, Transaction} from \"../../../@types/TransactionTypes/Transaction\";\r\nimport {useFetchTransactions} from \"../../hooks/useFetchTransactions\";\r\nimport useUpdateEffect from \"../../hooks/useUpdateEffect\";\r\nimport {loadTransactions} from \"../../redux/actions/transactionActions\";\r\n\r\n/**\r\n * Predicate function that checks if given transactiondate is in between startDate and endDate\r\n * @param transactionDate Date of transaction in milliseconds.\r\n * @param startDate Daterange beginning date in milliseconds.\r\n * @param endDate Daterange enddate in milliseconds.\r\n * @return boolean startDate <= transactionDate <= endDate\r\n */\r\nfunction isInDateRange(transactionDate: string, startDate: number, endDate: number): boolean {\r\n    const transactionDateMs = new Date(transactionDate).getTime();\r\n    if (startDate <= transactionDateMs && transactionDateMs <= endDate) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * @param transactions Array of all transaction objects\r\n * @param startDate Date object that represents the start of specified daterange\r\n * @param endDate Date object that  represents the end of specified daterange\r\n * @return array Returns an array of transactions with transaction.date between specified daterange.\r\n */\r\nfunction filterTransactions(transactions: ITransactionState, startDate: Date, endDate: Date) {\r\n    const startDateMs = startDate.getTime();\r\n    const endDateMs = endDate.getTime();\r\n    return transactions\r\n        .filter((transaction: Transaction) =>\r\n            isInDateRange(transaction.date, startDateMs, endDateMs));\r\n}\r\n\r\nconst DateFilter: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {transactionsList, error} = useFetchTransactions();\r\n\r\n    const [state, setState] = useState([\r\n        {\r\n            endDate: addDays(new Date(), 7),\r\n            key: \"selection\",\r\n            startDate: new Date(),\r\n        },\r\n    ]);\r\n\r\n    useUpdateEffect(() => {\r\n        if (!error) {\r\n            const {endDate, startDate, key} = state[0];\r\n            dispatch(changeDateRange({\r\n                endDateISO: endDate.toISOString(),\r\n                key,\r\n                startDateISO: startDate.toISOString()}));\r\n            const transactions = filterTransactions(transactionsList, startDate, endDate);\r\n            dispatch(loadTransactions(transactions));\r\n        }\r\n    }, [state]);\r\n\r\n    return (\r\n        <DateRangePicker\r\n        weekStartsOn={1}\r\n        ranges={state}\r\n        onChange={(item: any) => setState([item.selection])} />\r\n     );\r\n};\r\n\r\nexport default DateFilter;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * Custom hook for implementing useEffect that shouldn't run on the first\r\n * render of the component\r\n * @param callback Function that should run when component gets updated\r\n * @param dependencies<any[]> dependencies that the useEffect should listen\r\n */\r\nexport default function useUpdateEffect(callback: any, dependencies: any[]) {\r\n    const firstRenderRef = useRef(true);\r\n    useEffect( () => {\r\n        if (firstRenderRef.current) {\r\n            firstRenderRef.current = false;\r\n            return;\r\n        }\r\n        return callback();\r\n    }, dependencies);\r\n}\r\n","import { DateFilterAction, DateFilterState } from \"../reducers/dateFilterReducer\";\r\n\r\nexport const changeDateRange = (payload: DateFilterState): DateFilterAction => {\r\n    return {\r\n        payload,\r\n        type: \"CHANGE_DATERANGE\",\r\n    };\r\n};\r\n","import { Category } from \"../../../@types/CategoryTypes/category\";\r\nimport { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\n\r\ninterface graphBar {\r\n    name: string;\r\n    uv: number; // expense\r\n    pv: number; // budget of category\r\n\r\n}\r\ninterface graphData {\r\n    data: graphBar[];\r\n    error: string | null;\r\n}\r\n\r\nexport const getDataForGraph = (transactions: Transaction[], expenseCategories: Category[]): graphData => {\r\n    return mapTransactionsAmountsToGDO(transactions, expenseCategories);\r\n};\r\n\r\n// GDO = Graph Data Object (each GDO represents a dual-bar value in the dashboard graph)\r\nconst mapCategoriesToGDO = (expenseCategories: Category[]): graphData => {\r\n    const mappedCategories = expenseCategories.map((category: Category) => {\r\n        return {\r\n            name: category.name,\r\n            pv: category.budget,\r\n            uv: 0,\r\n        };\r\n    });\r\n    return {data: [...mappedCategories], error: null};\r\n};\r\n\r\n// GDO = Graph Data Object (each GDO represents a dual-bar value in the dashboard graph)\r\nconst mapTransactionsAmountsToGDO = (transactions: Transaction[], expenseCategories: Category[]): graphData => {\r\n    const {data} = mapCategoriesToGDO(expenseCategories);\r\n    transactions.forEach((transaction: Transaction) => {\r\n        if (typeof transaction.category !== \"string\") {\r\n            if (transaction.category.type === \"EXPENSE\") {\r\n                const amount = handleAmountFormat(transaction.amount);\r\n                const categoryKey = transaction.category.name;\r\n                for (let i = 0; i < data.length; i++) { // find transactions's category from list of all categories\r\n                    const graphDataObject = data[i];\r\n                    if (graphDataObject.name === categoryKey) { // if category from list matches category of transaction\r\n                        const chartCategoryExpenseTotal = graphDataObject.uv + amount; // take current expense total of prev transactions and sum new\r\n                        graphDataObject.uv = chartCategoryExpenseTotal; // insert new value to GDO\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return {data: [], error: \"Cannot map unpopulated Transactions to Dashboard graph.\"};\r\n        }\r\n    });\r\n    return {data, error: null};\r\n};\r\n\r\nconst handleAmountFormat = (entry: string | number): number => {\r\n    if (typeof entry === \"string\") {\r\n        return parseFloat(Math.abs(parseFloat(entry)).toFixed(2));\r\n    } else {\r\n        return parseFloat(Math.abs(entry).toFixed(2));\r\n    }\r\n};\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\r\nimport { showError } from \"src/redux/actions/errorActions\";\r\nimport { RootState } from \"src/redux/reducers\";\r\nimport { getDataForGraph } from \"./graphParse\";\r\n\r\nconst Graph: React.FC = () => {\r\n    const expenseCategories = useSelector((state: RootState) => state.categoryReducer.expenseCategories);\r\n    const transactions = useSelector((state: RootState) => state.transactionReducer);\r\n    const {data, error} = getDataForGraph(transactions, expenseCategories);\r\n    const dispatch = useDispatch();\r\n    if (error) { dispatch(showError(`Can not visualize expenses.`, error)); }\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"90%\" height={300}>\r\n            <BarChart data={data}>\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"name\" />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Bar name=\"Planned Budget\" dataKey=\"pv\" fill=\"#3159eb\" />\r\n                <Bar name=\"Actual Expenses\" dataKey=\"uv\" fill=\"#0fc6fc\" />\r\n            </BarChart>\r\n        </ResponsiveContainer>\r\n    );\r\n};\r\n\r\nexport default Graph;\r\n","import Card from \"@material-ui/core/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        border: \"solid\",\r\n        borderWidth: \"1px\",\r\n        borderColor: \"white\",\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n        padding: 10,\r\n    },\r\n    value: {\r\n        fontSize: \"1.1rem\",\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    icon: any;\r\n}\r\n\r\nconst SummaryElement: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n    const {icon, text, value} = props;\r\n    return (\r\n        <Card className={classes.root} elevation={4}>\r\n            {icon}\r\n            <Typography gutterBottom variant=\"body1\" component=\"h2\">\r\n                {text}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"h6\" component=\"h2\"\r\n            color=\"primary\"\r\n            className={classes.value}>\r\n                {value}\r\n            </Typography>\r\n\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SummaryElement;\r\n","import { Category } from \"../../../@types/CategoryTypes/category\";\r\nimport { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\n\r\ninterface summarizeTransactions {\r\n    income: string;\r\n    expenses: string;\r\n    savings: string;\r\n    error: null | string;\r\n}\r\ninterface summarizedData {\r\n    income: string;\r\n    expenses: string;\r\n    budget: string;\r\n    savings: string;\r\n    error: null | string;\r\n}\r\n// income is the sum of all transactions that have category type Income\r\n// expenses is the sum of all transactions that have category type Expense\r\n// budget is the ratio between Expenses and the sum of Expense category budgets\r\n// savings is the division between income and expenses\r\n\r\nconst parseTransactionAmounts = (transactions: Transaction[]): summarizeTransactions => {\r\n    let income: number = 0;\r\n    let expenses: number = 0;\r\n\r\n    transactions.forEach((transaction: Transaction) => {\r\n        if (typeof transaction.category !== \"string\") {\r\n            switch (transaction.category.type) {\r\n                default:\r\n                    return; // transaction type none, dont take this data to account\r\n                case \"Income\":\r\n                    income += handleIncomeTransaction(transaction);\r\n                    return;\r\n\r\n                case \"Expense\":\r\n                    expenses += handleExpenseTransaction(transaction);\r\n                    return;\r\n                }\r\n        } else {\r\n            return {income: \"\", expenses: \"\", savings: \"\", error: \"Can not work with unpopulated Transactions.\"};\r\n        }\r\n    });\r\n\r\n    const savings: number = income - expenses;\r\n    return {\r\n        income: income.toFixed(2).concat(\"€\"),\r\n        expenses: expenses.toFixed(2).concat(\"€\"),\r\n        savings: savings.toFixed(2).concat(\"€\"),\r\n        error: null,\r\n    };\r\n};\r\n\r\nfunction handleIncomeTransaction(transaction: Transaction): number {\r\n    const income = transaction.amount;\r\n    if (typeof income === \"string\") {\r\n        return parseFloat(income);\r\n    }\r\n    return income;\r\n}\r\n\r\nfunction handleExpenseTransaction(transaction: Transaction) {\r\n    // if expense, the incoming amount will have a dash infront of it (negative number)\r\n    let expense = transaction.amount;\r\n    if (typeof expense === \"string\") {\r\n        expense = expense.replace(\"-\", \"\");\r\n        return parseFloat(expense);\r\n    } else {\r\n        return Math.abs(expense);\r\n    }\r\n}\r\n\r\nexport const getSummaryData = (transactions: Transaction[], expenseCategories: Category[]): summarizedData => {\r\n    const {income, expenses, savings, error} = parseTransactionAmounts(transactions);\r\n    const {budgetTotal} = parseExpenseCategories(expenseCategories);\r\n    const budget = expenses + \"/\" + budgetTotal;\r\n    if (!error) {\r\n        return {\r\n            budget,\r\n            error: null,\r\n            expenses,\r\n            income,\r\n            savings,\r\n        };\r\n    } else {\r\n        return {income, expenses, savings, budget, error};\r\n    }\r\n};\r\n\r\nfunction parseExpenseCategories(expenseCategories: Category[]) {\r\n    let budgetTotal = 0;\r\n    expenseCategories.forEach((category: Category) => {\r\n        budgetTotal += category.budget;\r\n    });\r\n    return {budgetTotal: budgetTotal.toFixed(2).concat(\"€\")};\r\n}\r\n","import {Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { showError } from \"src/redux/actions/errorActions\";\r\nimport { RootState } from \"src/redux/reducers\";\r\nimport {Category} from \"../../../@types/CategoryTypes/category\";\r\nimport { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\nimport SummaryElement from \"./SummaryElement\";\r\nimport {getSummaryData} from \"./summaryParse\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        alignContent: \"center\",\r\n        marginRight: \"5%\",\r\n        padding: 10,\r\n        width: \"25%\",\r\n    },\r\n});\r\n\r\nconst SummaryPanels: React.FC = () => {\r\n    const classes = useStyles();\r\n    const transactions: Transaction[] = useSelector((state: RootState) => state.transactionReducer);\r\n    const expenseCategories: Category[] = useSelector((state: RootState) => state.categoryReducer.expenseCategories);\r\n    const dispatch = useDispatch();\r\n    const {income, expenses, budget, savings, error} = getSummaryData(transactions, expenseCategories);\r\n\r\n    if (error) { dispatch(showError(`Can not get data for Summary panels.`, error)); }\r\n\r\n    return (\r\n        <Grid container spacing={3} className={classes.root}>\r\n            <Grid item xs={12} md={6} >\r\n                <SummaryElement\r\n                text=\"Income\"\r\n                icon={<AttachMoneyIcon />}\r\n                value={income}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} >\r\n                <SummaryElement\r\n                text=\"Expenses\"\r\n                icon={<TrendingDownIcon />}\r\n                value={expenses}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} >\r\n                <SummaryElement\r\n                text=\"Budget\"\r\n                icon={<AccountBalanceWalletIcon />}\r\n                value={budget}\r\n                />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} >\r\n                <SummaryElement\r\n                text=\"Savings\"\r\n                icon={<TrendingUpIcon />}\r\n                value={savings}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default SummaryPanels;\r\n","import {Box, makeStyles} from \"@material-ui/core\";\r\nimport React, {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setBannerTitle } from \"../../redux/actions/bannerActions\";\r\nimport DateFilter from \"./DateFilter\";\r\nimport Graph from \"./Graph\";\r\nimport SummaryPanels from \"./SummaryPanels\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-evenly\",\r\n        border: \"solid\",\r\n        borderWidth: \"1px\",\r\n        borderColor: \"white\",\r\n        textAlign: \"center\",\r\n        width: \"100%\",\r\n        padding: \"20px\",\r\n    },\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: \"1%\",\r\n    },\r\n});\r\nconst Dashboard: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setBannerTitle({bannerTitle: \"Dashboard\"}));\r\n    }, []);\r\n    return (\r\n        <Box className={classes.root} boxShadow={4}>\r\n            <div className={classes.header}>\r\n                <SummaryPanels />\r\n                <DateFilter />\r\n            </div>\r\n\r\n            <Graph />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { hideError } from \"../../redux/actions/errorActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst ErrorToolbar = () => {\r\n    const dispatch = useDispatch();\r\n    const {showError, message, title} = useSelector((state: RootState) => state.errorReducer);\r\n\r\n    return (\r\n        <>\r\n        {showError &&\r\n            <Alert\r\n            severity=\"error\"\r\n            action={\r\n                <IconButton\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                    dispatch(hideError());\r\n                }}>\r\n                    <HighlightOffIcon />\r\n                </IconButton>\r\n            }>\r\n                <AlertTitle>{title}</AlertTitle>\r\n                {message}\r\n            </Alert>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ErrorToolbar;\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport InfoIcon from \"@material-ui/icons/Info\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { hideInfo } from \"src/redux/actions/infoActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst InfoToolbar: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {showInfo, message} = useSelector((state: RootState) => state.infoReducer);\r\n\r\n    return (\r\n        <>\r\n        {showInfo &&\r\n            <Alert\r\n            icon={<InfoIcon fontSize=\"inherit\"/>}\r\n            severity=\"info\"\r\n            action={\r\n                <IconButton\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                    dispatch(hideInfo());\r\n                }}>\r\n                    <HighlightOffIcon />\r\n                </IconButton>\r\n            }>\r\n                {message}\r\n            </Alert>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InfoToolbar;\r\n","import { IconButton } from \"@material-ui/core\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { hideSuccess } from \"../../redux/actions/successActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst SuccessToolbar: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const {showSuccess, message} = useSelector((state: RootState) => state.successReducer);\r\n\r\n    return (\r\n        <>\r\n        {showSuccess &&\r\n            <Alert\r\n            icon={<CheckIcon fontSize=\"inherit\"/>}\r\n            severity=\"success\"\r\n            action={\r\n                <IconButton\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                onClick={() => {\r\n                    dispatch(hideSuccess());\r\n                }}>\r\n                    <HighlightOffIcon />\r\n                </IconButton>\r\n            }>\r\n                {message}\r\n            </Alert>\r\n        }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SuccessToolbar;\r\n","import {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setBannerTitle} from \"../../redux/actions/bannerActions\";\r\n\r\nconst Reports: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setBannerTitle({bannerTitle: \"Reports\"}));\r\n    }, []);\r\n    return (\r\n        <div>\r\n            To be developed...\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Reports;\r\n","import { Button, Grid, makeStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {handleCsvExport, handleTransactionsDelete} from \"../../fetch/transactions\";\r\nimport { showError } from \"../../redux/actions/errorActions\";\r\nimport {hideInfo, showInfo} from \"../../redux/actions/infoActions\";\r\nimport { hideSuccess, showSuccess } from \"../../redux/actions/successActions\";\r\nimport { loadTransactions } from \"../../redux/actions/transactionActions\";\r\nimport {unCheckAllTransactions} from \"../../redux/actions/transactionCheckboxActions\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\n/**\r\n * Receives file from client, sends it to server in binary format, server handles it by saving it and then\r\n * parses the file from .csv -> array of strings -> array of Transaction objects -> persist to MongoDB\r\n * @param e Event that holds data about the chosen file\r\n * @param dispatch Dispatch function for rendering success/failure tooltips and loading in new transactions\r\n * @returns statusCode - 200 if OK, 400 if any error encountered\r\n * @returns newItems - Array of Transaction objects if statusCode 200\r\n */\r\nasync function handleFileSelected(e: React.ChangeEvent<HTMLInputElement>, dispatch: any): Promise<void> {\r\n    e.preventDefault();\r\n    const data = new FormData();\r\n    // Gets the file from HTML input from clientside\r\n    // e.target.files[0] is a binary file\r\n    // key MUST be 'csvUpload' because server side Multer searches for this key\r\n    // from the request\r\n    if (e.target.files![0] !== null) {\r\n        data.append(\"csvUpload\", e.target.files![0]);\r\n    } else {\r\n        dispatch(showError(`Can't upload file.`, `e.target.files[0] is null.`));\r\n    }\r\n    await fetch(\"/transactions/addcsv\", {\r\n        body: data,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        headers: {\r\n            \"x-access-token\": localStorage.getItem(\"token\") as string,\r\n        },\r\n    })\r\n        .then((res: any) => {\r\n            if (res.status === 200 || res.status === 204) {\r\n                return res.json();\r\n            } else if (res.status === 400 || res.status === 500) {\r\n                throw new Error(res.error);\r\n            }\r\n            throw new Error(\"Unknown request status code\");\r\n        }).then((res) => {\r\n            if (res.newItems) {\r\n                dispatch(showSuccess(res.statusText));\r\n                setTimeout(() => dispatch(hideSuccess()), 4000);\r\n                dispatch(loadTransactions(res.newItems));\r\n            } else {\r\n                dispatch(showInfo(res.statusText));\r\n                setTimeout(() => dispatch(hideInfo()), 4000);\r\n            }\r\n        }).catch((err: Error) => {\r\n            dispatch(showError(`Uploading CSV file failed.`, err.message));\r\n        });\r\n}\r\nconst deleteTransaction = (checkedTransactions: string[], dispatch: any) => {\r\n    handleTransactionsDelete(checkedTransactions).then((res) => {\r\n        dispatch(loadTransactions(res.allTransactions));\r\n        dispatch(unCheckAllTransactions());\r\n        dispatch(showSuccess(res.statusText));\r\n        setTimeout(() => dispatch(hideSuccess()), 4000);\r\n    }).catch((err: Error) => {\r\n        dispatch(showError(\"Could not delete the Transactions.\", err.message));\r\n    });\r\n};\r\n\r\nconst TransactionButtons = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { transactions, checkedTransactions } = useSelector((state: RootState) => {\r\n        const transactionsList = state.transactionReducer;\r\n        const checkedTransactionsList = state.transactionCheckboxReducer;\r\n        return {\r\n            checkedTransactions: checkedTransactionsList,\r\n            transactions: transactionsList,\r\n        }; });\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n            <Grid item xs={1}>\r\n                <input\r\n                name=\"csvUpload\"\r\n                accept=\".csv\"\r\n                style={{ display: \"none\" }}\r\n                id=\"raised-button-file\"\r\n                type=\"file\"\r\n                onChange={(e: ChangeEvent<HTMLInputElement>) => handleFileSelected(e, dispatch)}\r\n                />\r\n                <label htmlFor=\"raised-button-file\">\r\n                    <Button variant=\"contained\" component=\"span\" className={classes.button}>\r\n                        Upload CSV\r\n                    </Button>\r\n                </label>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Button\r\n                variant=\"contained\"\r\n                disabled={transactions.length === 0}\r\n                component=\"span\"\r\n                className={classes.button}\r\n                onClick={handleCsvExport}>\r\n                    Export CSV\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                disabled={checkedTransactions.length === 0}\r\n                component=\"span\"\r\n                className={classes.button}\r\n                onClick={() => deleteTransaction(checkedTransactions, dispatch)}>\r\n                    Delete Transactions\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TransactionButtons;\r\n","import { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\n\r\ninterface IPayload {\r\n    transactionId?: string;\r\n    transactions?: Transaction[];\r\n}\r\nexport interface ICheckAction {\r\n    type: string;\r\n    payload: IPayload;\r\n}\r\n\r\n/**\r\n * Add Transaction ID to the state holding all checked Transactions\r\n * @param payload transactionId = transaction._id\r\n */\r\nexport const checkTransaction = (payload: IPayload): ICheckAction => {\r\n    return {\r\n        payload,\r\n        type: \"CHECK_TRANSACTION\",\r\n    };\r\n};\r\n/**\r\n * Insert all transactions, passed in via args, to Transaction Checkbox state\r\n * @param payload Array of Transaction _id's to be added to Transaction Checkbox state\r\n */\r\nexport const checkAllTransactions = (payload: IPayload): ICheckAction => {\r\n    return {\r\n        payload,\r\n        type: \"CHECK_ALL_TRANSACTIONS\",\r\n    };\r\n};\r\n\r\n/**\r\n * Remove Transaction ID from the state holding all checked Transactions\r\n * @param payload transactionId = transaction._id\r\n */\r\nexport const unCheckTransaction = (payload: IPayload): ICheckAction => {\r\n    return {\r\n        payload,\r\n        type: \"UN_CHECK_TRANSACTION\",\r\n    };\r\n};\r\n/**\r\n * Clear transactionCheckboxReducer state\r\n */\r\nexport const unCheckAllTransactions = (): {type: string} => {\r\n    return {\r\n        type: \"UN_CHECK_ALL_TRANSACTIONS\",\r\n    };\r\n};\r\n","import {FormControl, Select} from \"@material-ui/core\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport type {Category} from \"../../../@types/CategoryTypes/category\";\r\nimport {showError} from \"../../redux/actions/errorActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\ninterface IProps {\r\n    currentCategory: string | Category;\r\n    handleChange: any;\r\n}\r\n\r\nconst RowDropdown: React.FC<IProps> = (props) => {\r\n    const {handleChange, currentCategory} = props;\r\n    const [currentCategoryId, setCurrentCategoryId] = useState(\"0\");\r\n    const {\r\n        incomeCategories,\r\n        expenseCategories,\r\n        noneCategory,\r\n    } = useSelector((state: RootState) => state.categoryReducer);\r\n\r\n    const dispatch = useDispatch();\r\n    /**\r\n     * Returns an array of <option> elements where element is a Category object\r\n     * @param categories Array of category objects to be rendered into a single list.\r\n     */\r\n    const renderOptions = (categories: Category[]) => {\r\n        if (categories) {\r\n            return categories.map((element) => {\r\n                return (\r\n                    <option key={element._id} value={element._id}>\r\n                        {element.name}\r\n                    </option>\r\n                );\r\n            });\r\n        }\r\n        dispatch(showError(`Loading categories dropdown for transactions failed.`,\r\n            `No categories found.`));\r\n    };\r\n    useEffect(() => {\r\n        if (typeof currentCategory === \"string\") {\r\n            setCurrentCategoryId(currentCategory);\r\n        } else {\r\n            setCurrentCategoryId(currentCategory._id);\r\n        }\r\n    });\r\n    return (\r\n        <FormControl>\r\n            <Select\r\n                native={true}\r\n                value={currentCategoryId}\r\n                id=\"categories-dropdown\"\r\n                onChange={handleChange}>\r\n                <option\r\n                    value={noneCategory._id}>NONE\r\n                </option>\r\n                <optgroup label=\"Income\">\r\n                    {renderOptions(incomeCategories)}\r\n                </optgroup>\r\n\r\n                <optgroup label=\"Expense\">\r\n                    {renderOptions(expenseCategories)}\r\n                </optgroup>\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default RowDropdown;\r\n","import {Button, Grid, makeStyles, TextField} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {hideError, showError} from \"src/redux/actions/errorActions\";\r\nimport {hideSuccess, showSuccess} from \"src/redux/actions/successActions\";\r\nimport {appendTransaction} from \"src/redux/actions/transactionActions\";\r\nimport {addTransactionToDatabase} from \"../../fetch/transactions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\nimport {transactionFormSchema} from \"../../validation\";\r\nimport RowDropdown from \"./RowDropdown\";\r\n\r\nconst useStyles = makeStyles({\r\n    dropdown: {\r\n        marginTop: \"1rem\",\r\n        padding: \"0.5%\",\r\n    },\r\n    gridItem: {\r\n        padding: \"0.5%\",\r\n    }, root: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        width: \"100%\",\r\n    }, field: {\r\n        width: \"100%\",\r\n    }, button: {\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\nconst TransactionsForm: React.FC<any> = () => {\r\n    const dispatch = useDispatch();\r\n    const {noneCategory} = useSelector((rootstate: RootState) => rootstate.categoryReducer);\r\n    const [state, setState] = useState({\r\n        amount: \"\",\r\n        date: \"\",\r\n        description: \"\",\r\n        name: \"\",\r\n    });\r\n    const {date, name, description, amount} = state;\r\n    const [showInputError, setShowInputError] = useState(false);\r\n    const [currentCategoryId, setCurrentCategoryId] = useState(noneCategory._id);\r\n    const classes = useStyles();\r\n    const handleInput = (e: { target: { name: string; value: string } }) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleChange = (e: any): void => {\r\n        if (e.target !== null) {\r\n            const newCategoryId = e.target.value;\r\n            setCurrentCategoryId(newCategoryId);\r\n        }\r\n    };\r\n\r\n    const onSubmit = async (e: any): Promise<void> => {\r\n        e.preventDefault();\r\n        let parsedAmount = -1;\r\n        try {\r\n            parsedAmount = parseFloat(amount);\r\n            await transactionFormSchema.validate({\r\n                amount: parsedAmount,\r\n                category: currentCategoryId,\r\n                date,\r\n                description,\r\n                name,\r\n            });\r\n        } catch (err: any) {\r\n            setShowInputError(true);\r\n            dispatch(showError(`Could not add new Transaction`, err.message));\r\n            setTimeout(() => { dispatch(hideError()); }, 4000);\r\n            return;\r\n        }\r\n        const convertedDate = new Date(date).toISOString();\r\n        await addTransactionToDatabase({\r\n            amount: parsedAmount,\r\n            category: currentCategoryId,\r\n            date: convertedDate,\r\n            description,\r\n            name,\r\n        })\r\n            .then((res: any) => {\r\n                dispatch(showSuccess(res.statusText));\r\n                dispatch(appendTransaction({...res.addedItem}));\r\n                setTimeout(() => {\r\n                    dispatch(hideSuccess());\r\n                }, 4000);\r\n\r\n                setState({name: \"\", description: \"\", amount: \"\", date: \"\"});\r\n                setCurrentCategoryId(noneCategory._id);\r\n            }).catch((err: Error) => {\r\n                dispatch(showError(`Could not add new transaction to database`, err.message));\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <form\r\n                encType=\"multipart/form-data\" // required for Multer middleware to work.\r\n                className={classes.root}\r\n                onSubmit={onSubmit}>\r\n                <Grid item xs={2} className={classes.gridItem}>\r\n                    <TextField\r\n                        error={showInputError}\r\n                        label=\"Date ( DD/MM/YYYY )\"\r\n                        name=\"date\"\r\n                        className={classes.field}\r\n                        value={state.date}\r\n                        onChange={handleInput}/>\r\n                </Grid>\r\n                <Grid item xs={2} className={classes.gridItem}>\r\n                    <TextField\r\n                        error={showInputError}\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        className={classes.field}\r\n                        value={state.name}\r\n                        onChange={handleInput}/>\r\n                </Grid>\r\n                <Grid item xs={5} className={classes.gridItem}>\r\n                    <TextField\r\n                        error={showInputError}\r\n                        label=\"Description\"\r\n                        name=\"description\"\r\n                        className={classes.field}\r\n                        value={state.description}\r\n                        onChange={handleInput}/>\r\n                </Grid>\r\n                <Grid item xs={1} className={classes.gridItem}>\r\n                    <TextField\r\n                        error={showInputError}\r\n                        label=\"Amount\"\r\n                        name=\"amount\"\r\n                        className={classes.field}\r\n                        value={state.amount}\r\n                        onChange={handleInput}/>\r\n                </Grid>\r\n                <Grid item xs={1} className={classes.dropdown}>\r\n                    <RowDropdown currentCategory={currentCategoryId} handleChange={handleChange}/>\r\n                </Grid>\r\n                <Grid item xs={1} className={classes.gridItem}>\r\n                    <Button\r\n                        className={classes.button}\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >Add</Button>\r\n                </Grid>\r\n            </form>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TransactionsForm;\r\n","import {Checkbox, Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    checkAllTransactions,\r\n    unCheckAllTransactions,\r\n} from \"../../redux/actions/transactionCheckboxActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        border: \"solid\",\r\n        borderWidth: \"1px\",\r\n        textAlign: \"center\",\r\n    },\r\n});\r\ninterface Props {\r\n    checkAll: (cb: (prev: boolean) => boolean) => void;\r\n}\r\n\r\nconst TransactionsHeader: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const transactions = useSelector((state: RootState) => state.transactionReducer);\r\n    const handleChange = (e: {target: {checked: boolean}}) => {\r\n        if (e.target.checked) {\r\n            dispatch(checkAllTransactions({transactions}));\r\n        } else {\r\n            dispatch(unCheckAllTransactions());\r\n        }\r\n        props.checkAll((prev: boolean) => !prev);\r\n    };\r\n    return (\r\n        <div>\r\n            <Grid container>\r\n                <Grid container item xs={2}>\r\n                    <Grid item xs={2}>\r\n                        <Checkbox onChange={handleChange}/>\r\n                    </Grid>\r\n                    <Grid item xs={10} className={classes.root}>\r\n                        <p>Date</p>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={2} className={classes.root}>\r\n                    <p>Name</p>\r\n                </Grid>\r\n                <Grid item xs={6} className={classes.root}>\r\n                    <p>Description</p>\r\n                </Grid>\r\n                <Grid item xs={1} className={classes.root}>\r\n                    <p>Amount</p>\r\n                </Grid>\r\n                <Grid item xs={1} className={classes.root}>\r\n                    <p>Category</p>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionsHeader;\r\n","import {Grid} from \"@material-ui/core\";\r\nimport { Checkbox, makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { showError } from \"src/redux/actions/errorActions\";\r\nimport { updateTransactionsCategory } from \"src/redux/actions/transactionActions\";\r\nimport { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\nimport {handleCategoryUpdate} from \"../../fetch/transactions\";\r\nimport {checkTransaction, unCheckTransaction} from \"../../redux/actions/transactionCheckboxActions\";\r\nimport RowDropdown from \"./RowDropdown\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        textAlign: \"center\",\r\n    },\r\n});\r\n// TODO: Implement single category change functionality\r\n\r\ninterface IProps {\r\n    data: Transaction;\r\n    isAllChecked: boolean;\r\n}\r\nconst TransactionsRow: React.FC<IProps> = (props) => {\r\n    const {date, name, description, amount, category, _id} = props.data;\r\n    const classes = useStyles();\r\n    const [currentCategoryId, setCurrentCategoryId] = useState(\"1\");\r\n    const [isThisChecked, setIsThisChecked] = useState(false);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        // Unpopulated (Mongoose population) Transactions SHOULD NOT arrive here but if they\r\n        // do then this logic avoids unneccesary crash.\r\n        if (typeof category !== \"string\") {\r\n            setCurrentCategoryId(category._id);\r\n        } else {\r\n            setCurrentCategoryId(category);\r\n        }\r\n    }, [category, currentCategoryId]);\r\n    /**\r\n     * Triggered when user clicks on an option in RowDropdown component.\r\n     * Takes the click event as parameter and extracts option value (category._id) from it\r\n     * and then makes API request to change all suitable transactions' categories.\r\n     * @param e Event generated when clicking on an option in the dropdown.\r\n     */\r\n    const handleChange = async (e: { target: { value: string; } }) => {\r\n        if (e.target !== null) {\r\n          const newCategoryId = e.target.value;\r\n          await handleCategoryUpdate(newCategoryId, _id!).then((res: any) => {\r\n              setCurrentCategoryId(newCategoryId);\r\n              dispatch(updateTransactionsCategory(name, newCategoryId));\r\n          }).catch((err: Error) => {\r\n            dispatch(showError(`Couldn't update transaction category.`, err.message));\r\n          });\r\n        }\r\n    };\r\n    const handleCheckboxChange = (event: {target: {checked: boolean}}) => {\r\n        if (event.target.checked) {\r\n            setIsThisChecked(true);\r\n            dispatch(checkTransaction({transactionId: _id!}));\r\n        } else {\r\n            setIsThisChecked(false);\r\n            dispatch(unCheckTransaction({transactionId: _id!}));\r\n        }\r\n    };\r\n    const [month, day, year] = new Date(date).toLocaleDateString().split(\"/\");\r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid container item xs={2}>\r\n                <Grid item xs={2}>\r\n                    <Checkbox\r\n                    onChange={handleCheckboxChange}\r\n                    checked={props.isAllChecked || isThisChecked}/>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    <p>{day.concat(\"/\").concat(month).concat(\"/\").concat(year)}</p>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n                <p>{name}</p>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <p>{description}</p>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <p>{amount}</p>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <RowDropdown\r\n                handleChange={handleChange}\r\n                currentCategory={category} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TransactionsRow;\r\n","import {Grid} from \"@material-ui/core\";\r\nimport {useState} from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Transaction } from \"../../../@types/TransactionTypes/Transaction\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport TransactionsHeader from \"./TransactionsHeader\";\r\nimport TransactionsRow from \"./TransactionsRow\";\r\n\r\nconst TransactionsList = () => {\r\n    const transactionsList = useSelector(({transactionReducer}: RootState) => transactionReducer);\r\n    const [isChecked, setIsChecked] = useState(false);\r\n    const renderRows = () => {\r\n        return(transactionsList.map((element: Transaction)  => {\r\n            return(\r\n                <Grid item xs={12} key={element._id}>\r\n                    <TransactionsRow\r\n                    data={element}\r\n                    isAllChecked={isChecked}/>\r\n                </Grid> );\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Grid container spacing={1}>\r\n            <Grid item xs={12}>\r\n                <TransactionsHeader\r\n                checkAll={setIsChecked}/>\r\n            </Grid>\r\n\r\n            {renderRows()}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default TransactionsList;\r\n","import {makeStyles, TextField} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport {SetStateAction, useState} from \"react\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        padding: \"0.5rem\",\r\n    }, searchBar: {\r\n        width: \"100%\",\r\n    }, searchIcon: {\r\n        width: \"50px\",\r\n        textAlign: \"center\",\r\n        alignSelf: \"center\",\r\n    },\r\n});\r\n\r\nconst TransactionsSearch = () => {\r\n    const classes = useStyles();\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n\r\n    const handleInput = (e: { target: { value: SetStateAction<string>; }; }) => {\r\n        setSearchInput(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n            id=\"filled-basic\"\r\n            label=\"Search Transactions\"\r\n            name=\"transactionSearchField\"\r\n            onChange={handleInput}\r\n            value={searchInput}\r\n            className={classes.searchBar}\r\n            />\r\n            <div className={classes.searchIcon}>\r\n                <SearchIcon />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionsSearch;\r\n","import { Box, Grid, makeStyles} from \"@material-ui/core\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setBannerTitle} from \"../../redux/actions/bannerActions\";\r\nimport TransactionButtons from \"./TransactionButtons\";\r\nimport TransactionsForm from \"./TransactionsForm\";\r\nimport TransactionsList from \"./TransactionsList\";\r\nimport TransactionsSearch from \"./TransactionsSearch\";\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: \"0.7rem\",\r\n    },\r\n});\r\n\r\nconst Transactions: React.FC = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(setBannerTitle({bannerTitle: \"Transactions\"}));\r\n    }, []);\r\n    return (\r\n        <Box boxShadow={2} className={classes.root}>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                    <TransactionButtons />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TransactionsForm />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TransactionsSearch />\r\n                </Grid>\r\n                <TransactionsList/>\r\n\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Transactions;\r\n","import {Box, makeStyles} from \"@material-ui/core\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {setUserLoggedOut} from \"../../redux/actions/userActions\";\r\nimport {RootState} from \"../../redux/reducers\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"#3f51b5\",\r\n        textAlign: \"left\",\r\n        padding: \"20px\",\r\n        fontSize: 20,\r\n        color: \"whitesmoke\",\r\n        justifyContent: \"space-between\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    },\r\n    buttons: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        width: \"12%\",\r\n        marginRight: \"2%\",\r\n        justifyContent: \"space-between\",\r\n        fontSize: \"16px\",\r\n    },\r\n});\r\n\r\nconst Banner = () => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const {username} = useSelector((state: RootState) => state.userReducer);\r\n    const {bannerTitle} = useSelector((state: RootState) => state.bannerReducer);\r\n    const handleLogout = () => {\r\n        localStorage.removeItem(\"token\");\r\n        dispatch(setUserLoggedOut());\r\n    };\r\n    return (\r\n        <Box className={classes.root} boxShadow={4}>\r\n            {bannerTitle}\r\n            <div className={classes.buttons}>\r\n                <div><Button\r\n                    variant=\"contained\"\r\n                    onClick={handleLogout}>\r\n                    Log out\r\n                </Button></div>\r\n                <div><p>{username}</p></div>\r\n            </div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\ninterface Props {\r\n    icon: any;\r\n    text: string;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        border: 0,\r\n        borderRadius: 3,\r\n        boxShadow: \"0 3px 5px 2px rgb(148 124 129 / 11%)\",\r\n        color: \"white\",\r\n        height: 48,\r\n        padding: \"0 30px\",\r\n        width: \"100%\",\r\n        fontSize: \"0.8rem\",\r\n    },\r\n});\r\n\r\nconst NavButton: React.FC<Props> = (props) => {\r\n    const {text, icon} = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button className = {classes.root}\r\n        variant=\"contained\"\r\n        color=\"primary\">\r\n        {icon}\r\n        {text}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default NavButton;\r\n","import { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport LocalAtmIcon from \"@material-ui/icons/LocalAtm\";\r\nimport SyncAltIcon from \"@material-ui/icons/SyncAlt\";\r\nimport {BrowserRouter as Router, Link} from \"react-router-dom\";\r\nimport NavButton from \"./NavButton\";\r\n\r\nconst useStyles = makeStyles({\r\n    link: {\r\n        textDecoration: \"none\",\r\n    },\r\n    root: {\r\n        background: \"linear-gradient(180deg , #3f51b5 30%, rgb(0 0 0 / 0%) 100%)\",\r\n        height: \"80vh\",\r\n        width: \"10%\",\r\n    },\r\n});\r\n\r\nconst NavigationBar = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <nav className={classes.root}>\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12} md={12}>\r\n                    <Link to=\"/dashboard\" className={classes.link}>\r\n                        <NavButton text=\"Dashboard\" icon={<DashboardIcon />} />\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <Link to=\"/transactions\" className={classes.link}>\r\n                        <NavButton text=\"Transactions\" icon={<SyncAltIcon />} />\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <Link to=\"/categories\" className={classes.link} >\r\n                        <NavButton text=\"Categories\" icon={<LocalAtmIcon />} />\r\n                    </Link>\r\n                </Grid>\r\n                <Grid item xs={12} md={12}>\r\n                    <Link to=\"/reports\" className={classes.link}>\r\n                        <NavButton text=\"Reports\" icon={<BarChartIcon />} />\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import {makeStyles} from \"@material-ui/core\";\r\nimport {useEffect} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {BrowserRouter as Router, Route, Switch, useHistory} from \"react-router-dom\";\r\nimport {useTitle} from \"react-use\";\r\nimport Login from \"../src/components/user/Login\";\r\nimport \"./App.css\";\r\nimport Categories from \"./components/categories/Categories\";\r\nimport Dashboard from \"./components/dashboard/Dashboard\";\r\nimport ErrorToolbar from \"./components/info/ErrorToolbar\";\r\nimport InfoToolbar from \"./components/info/InfoToolbar\";\r\nimport SuccessToolbar from \"./components/info/SuccessToolbar\";\r\nimport Reports from \"./components/reports/Reports\";\r\nimport Transactions from \"./components/transactions/Transactions\";\r\nimport Banner from \"./components/window/Banner\";\r\nimport NavigationBar from \"./components/window/NavigationBar\";\r\nimport {useFetchCategories} from \"./hooks/useFetchCategories\";\r\nimport {useFetchTransactions} from \"./hooks/useFetchTransactions\";\r\nimport {loadCategories} from \"./redux/actions/categoryActions\";\r\nimport {loadTransactions} from \"./redux/actions/transactionActions\";\r\nimport {RootState} from \"./redux/reducers\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        boxSizing: \"border-box\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    }, frameStyles: {\r\n        margin: \"3rem\",\r\n        width: \"100%\",\r\n    }, content: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n    },\r\n});\r\nfunction App() {\r\n    useTitle(\"Categorizer\");\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const {isLoggedIn} = useSelector((state: RootState) => state.userReducer);\r\n    const {incomeCategories, expenseCategories, noneCategory, categoryError} = useFetchCategories();\r\n    const {transactionsList, error} = useFetchTransactions();\r\n\r\n    useEffect(() => {\r\n        if (!categoryError && !error && isLoggedIn) {\r\n            dispatch(loadCategories({\r\n                expenseCategories,\r\n                incomeCategories,\r\n                noneCategory,\r\n            }));\r\n            dispatch(loadTransactions(transactionsList));\r\n        }\r\n    }, [expenseCategories, incomeCategories, transactionsList]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {isLoggedIn && <Banner/>}\r\n            <div className={classes.content}>\r\n                {isLoggedIn\r\n                    ? <Router>\r\n                        <NavigationBar />\r\n                        <div className={classes.frameStyles}>\r\n                            <ErrorToolbar/>\r\n                            <SuccessToolbar/>\r\n                            <InfoToolbar/>\r\n\r\n                            <Switch>\r\n                                <Route exact path=\"/dashboard\" component={Dashboard}/>\r\n                                <Route exact path=\"/transactions\" component={Transactions}/>\r\n                                <Route exact path=\"/categories\" component={Categories}/>\r\n                                <Route exact path=\"/reports\" component={Reports}/>\r\n                            </Switch>\r\n                        </div>\r\n                    </Router>\r\n                    :\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route exact path=\"/login\" component={Login}/>\r\n                        </Switch>\r\n                    </Router>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport type { Category } from \"../../@types/CategoryTypes/category\";\r\nimport { getData } from \"../fetch/categories\";\r\nimport { showError } from \"../redux/actions/errorActions\";\r\n\r\ninterface FetchCategories {\r\n    incomeCategories: Category[];\r\n    expenseCategories: Category[];\r\n    noneCategory: Category;\r\n    categoryError: boolean;\r\n}\r\n\r\nexport const useFetchCategories = (): FetchCategories => {\r\n    const [incomeCategories, setIncomeCategories] = useState<Category[]>([]);\r\n    const [expenseCategories, setExpenseCategories] = useState<Category[]>([]);\r\n    const [noneCategory, setNoneCategory] = useState<Category>({\r\n        _id: \"\",\r\n        budget: 0,\r\n        name: \"\",\r\n        type: \"\",\r\n    });\r\n    let error = false;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect( () => {\r\n        async function fetch() {\r\n            await getData().then((res) => {\r\n                setIncomeCategories([...res.incomeCategories]);\r\n                setExpenseCategories([...res.expenseCategories]);\r\n                setNoneCategory(res.noneCategory);\r\n            }).catch((err: Error) => {\r\n                error = true;\r\n                dispatch(showError(`Error making API request to database.`, err.message));\r\n            });\r\n        }\r\n        fetch();\r\n    }, []);\r\n    return {incomeCategories, expenseCategories, noneCategory, categoryError: error};\r\n};\r\n","import {Router} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Route, Switch, useHistory} from \"react-router-dom\";\r\nimport Register from \"../src/components/user/Register\";\r\nimport App from \"./App\";\r\nimport Login from \"./components/user/Login\";\r\nimport {setUserLoggedIn} from \"./redux/actions/userActions\";\r\nimport {RootState} from \"./redux/reducers\";\r\n\r\ninterface CheckUserAuth {\r\n    tokenValid: boolean;\r\n    username: string;\r\n}\r\nconst isTokenValid = (): Promise<CheckUserAuth> => {\r\n    const token = (localStorage.getItem(\"token\")) as string;\r\n    const result = fetch(\"/isUserAuth\", {\r\n        headers: {\r\n            \"x-access-token\": token,\r\n        },\r\n    }).then((resp) => {\r\n        if (resp.status === 200) {\r\n            return resp.json();\r\n        } else {\r\n            throw new Error();\r\n        }\r\n    }).then((data: any) => {\r\n        return {\r\n            tokenValid: true,\r\n            username: data.username,\r\n        };\r\n    }).catch((err: Error) => {\r\n        return {\r\n            tokenValid: false,\r\n            username: \"\",\r\n        };\r\n    });\r\n    return result;\r\n};\r\n\r\nconst AuthWrapper = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const {isLoggedIn} = useSelector((state: RootState) => state.userReducer);\r\n    if (!isLoggedIn) {\r\n        isTokenValid()\r\n            .then((data: any) => {\r\n                if (data.tokenValid) {\r\n                    dispatch(setUserLoggedIn({isLoggedIn: true, username: data.username}));\r\n                    history.push(\"/\");\r\n                } else {\r\n                    history.push(\"/login\");\r\n                }\r\n            }).catch((err: Error) => {\r\n            console.error(err.message);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={App} />\r\n                <Route exact path=\"/login\" component={Login} />\r\n                <Route exact path=\"/register\" component={Register} />\r\n            </Switch>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AuthWrapper;\r\n","interface BannerState{\r\n    bannerTitle: string;\r\n}\r\ninterface BannerAction {\r\n    type: string;\r\n    payload: BannerState;\r\n}\r\nconst initialState = {\r\n    bannerTitle: \"\",\r\n};\r\n\r\nexport const bannerReducer = (state: BannerState = initialState, action: BannerAction): BannerState => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state};\r\n        case \"SET_BANNER_TITLE\":\r\n            return {bannerTitle: action.payload.bannerTitle};\r\n    }\r\n};\r\n\r\nexport default bannerReducer;\r\n","import type { Action, Category, categoryState } from \"../../../@types/CategoryTypes/category\";\r\n\r\nconst defaultCategory: Category = {\r\n    _id: \"\",\r\n    budget: 0,\r\n    name: \"\",\r\n    type: \"\",\r\n};\r\nconst initialState: categoryState = {\r\n    expenseCategories: [],\r\n    incomeCategories: [],\r\n    noneCategory: defaultCategory,\r\n};\r\n\r\nexport const categoryReducer = (state: categoryState = {...initialState}, action: Action): categoryState => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state};\r\n\r\n        case \"LOAD_CATEGORIES\":\r\n            return {...state,\r\n                ...action.payload.allCategories};\r\n\r\n        case \"GET_CATEGORIES\":\r\n            return {...state};\r\n\r\n        case \"DELETE_CATEGORY\":\r\n            return {...state,\r\n                incomeCategories: state.incomeCategories.filter(\r\n                    (category: Category) => category._id !== action.payload.category_id),\r\n                expenseCategories: state.expenseCategories.filter(\r\n                    (category: Category) => category._id !== action.payload.category_id,\r\n                )};\r\n        case \"ADD_INCOME_CATEGORY\":\r\n            return {\r\n                ...state,\r\n                incomeCategories: [...state.incomeCategories, action.payload.newCategory],\r\n            };\r\n        case \"ADD_EXPENSE_CATEGORY\":\r\n            return {\r\n                ...state,\r\n                expenseCategories: [...state.expenseCategories, action.payload.newCategory],\r\n            };\r\n    }\r\n};\r\n\r\nexport default categoryReducer;\r\n","export interface DateFilterState {\r\n    startDateISO: string;\r\n    endDateISO: string;\r\n    key: string;\r\n}\r\n\r\nexport interface DateFilterAction {\r\n    type: string;\r\n    payload: DateFilterState;\r\n}\r\nconst initialState: DateFilterState = {\r\n    endDateISO: new Date(\"01.01.2021\").toISOString(),\r\n    key: \"selection\",\r\n    startDateISO: new Date(\"01.01.1970\").toISOString(),\r\n};\r\n\r\nexport const dateFilterReducer = (state: DateFilterState = initialState,\r\n                                  action: DateFilterAction): DateFilterState => {\r\n    const {type, payload} = action;\r\n    switch (type) {\r\n        default:\r\n            return state;\r\n\r\n        case \"CHANGE_DATERANGE\":\r\n            return {...state, ...payload};\r\n\r\n    }\r\n};\r\n\r\nexport default dateFilterReducer;\r\n","import { Action, errorState } from \"../../../@types/Info/Error\";\r\n\r\nconst errorReducer = (state: errorState = {showError: false, message: null, title: null}, action: Action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n        case \"SHOW_ERROR\":\r\n            const message = action.payload.message;\r\n            const title = action.payload.title;\r\n            return {\r\n                showError: true,\r\n                title,\r\n                message,\r\n            };\r\n        case \"HIDE_ERROR\":\r\n            return {\r\n                showError: false,\r\n                message: null,\r\n                title: null,\r\n            };\r\n    }\r\n};\r\n\r\nexport default errorReducer;\r\n","interface infoState {\r\n    showInfo: boolean,\r\n    message: string\r\n}\r\ninterface Action{\r\n    type: string,\r\n    payload: string\r\n}\r\nconst infoReducer = (state: infoState = {showInfo: false, message: ''}, action: Action) => {\r\n    switch (action.type){\r\n        default:\r\n            return state\r\n        \r\n        case 'SHOW_INFO':\r\n            return {\r\n                showInfo: true,\r\n                message: action.payload\r\n            }\r\n\r\n        case 'HIDE_INFO':\r\n            return {\r\n                showInfo: false,\r\n                message: ''\r\n            }\r\n    }\r\n}\r\n\r\nexport default infoReducer","interface loadingState {\r\n    loading: boolean;\r\n}\r\n\r\ninterface Action {\r\n    type: string;\r\n    loading: boolean;\r\n}\r\n\r\nconst loadingReducer = (state: loadingState = {loading: false}, action: Action ): loadingState => {\r\n    switch (action.type) {\r\n        default:\r\n            return {loading: false};\r\n        case \"SHOW_LOADING\":\r\n            return {loading: true};\r\n\r\n        case \"HIDE_LOADING\":\r\n            return {loading: false};\r\n    }\r\n};\r\n\r\nexport default loadingReducer;\r\n","import {Action, successState} from \"../../../@types/Info/Success\";\r\n\r\nconst successReducer = (state: successState = {showSuccess: false, message: null}, action: Action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n\r\n        case \"SHOW_SUCCESS\":\r\n            return {\r\n                showSuccess: true,\r\n                message: action.payload.message,\r\n            };\r\n\r\n        case \"HIDE_SUCCESS\":\r\n            return {\r\n                showSuccess: false,\r\n                message: null,\r\n            };\r\n    }\r\n};\r\n\r\nexport default successReducer;\r\n","import { ICheckAction } from \"../actions/transactionCheckboxActions\";\r\ninterface ITransactionCheckState extends Array<string> {}\r\n\r\nconst transactionCheckboxReducer = (state: ITransactionCheckState = [],\r\n                                    action: ICheckAction): ITransactionCheckState => {\r\n    switch (action.type) {\r\n        default:\r\n            return [...state];\r\n\r\n        case \"CHECK_TRANSACTION\":\r\n            return [...state, action.payload.transactionId!];\r\n        case \"CHECK_ALL_TRANSACTIONS\":\r\n            const transactionIds = action.payload.transactions!\r\n                .map((transaction) => transaction._id!);\r\n            return [...state, ...transactionIds];\r\n        case \"UN_CHECK_TRANSACTION\":\r\n            return state\r\n                .filter((storedTransactionId) =>\r\n                    storedTransactionId !== action.payload.transactionId);\r\n        case \"UN_CHECK_ALL_TRANSACTIONS\":\r\n            return [];\r\n    }\r\n};\r\n\r\nexport default transactionCheckboxReducer;\r\n","import {ITransactionAction, ITransactionState, Transaction} from \"../../../@types/TransactionTypes/Transaction\";\r\n\r\nconst defaultState: ITransactionState = [];\r\n\r\nconst transactionReducer = (state: ITransactionState = defaultState, action: ITransactionAction): ITransactionState => {\r\n    switch (action.type) {\r\n        default:\r\n            return [...state];\r\n\r\n        case \"LOAD_TRANSACTIONS\":\r\n            return [...action.payload.allTransactions!];\r\n\r\n        case \"GET_TRANSACTIONS\":\r\n            return [...state];\r\n\r\n        case \"UPDATE_TRANSACTIONS_CAT\":\r\n            const name = action.payload.transactionName;\r\n            const newCategoryId = action.payload.newCategoryId!;\r\n            return state.map((transaction: Transaction) => {\r\n                if (transaction.name === name) {\r\n                    return {\r\n                        ...transaction,\r\n                        category: newCategoryId,\r\n                    };\r\n                }\r\n                return {...transaction};\r\n            });\r\n        case \"APPEND_TRANSACTION\":\r\n            state.push(action.payload.addedItem!);\r\n            return [...state];\r\n    }\r\n};\r\n\r\nexport default transactionReducer;\r\n","interface UserStatus {\r\n    username: string;\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nconst userReducer = (state: any = {isLoggedIn: false, username: \"\"}, action: any): UserStatus => {\r\n    switch ( action.type ) {\r\n        default:\r\n            return {...state};\r\n        case \"GET_USER_STATUS\":\r\n            return {...state};\r\n        case \"SET_USER_LOGGED_IN\":\r\n            return {...action.payload};\r\n        case \"SET_USER_LOGGED_OUT\":\r\n            return {username: \"\", isLoggedIn: false};\r\n    }\r\n};\r\n\r\nexport default userReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bannerReducer from \"../reducers/bannerReducer\";\r\nimport categoryReducer from \"./categoryReducer\";\r\nimport dateFilterReducer from \"./dateFilterReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport infoReducer from \"./infoReducer\";\r\nimport loadingReducer from \"./loadingReducer\";\r\nimport successReducer from \"./successReducer\";\r\nimport transactionCheckboxReducer from \"./transactionCheckboxReducer\";\r\nimport transactionReducer from \"./transactionReducer\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n    bannerReducer,\r\n    categoryReducer,\r\n    dateFilterReducer,\r\n    errorReducer,\r\n    infoReducer,\r\n    loadingReducer,\r\n    successReducer,\r\n    transactionCheckboxReducer,\r\n    transactionReducer,\r\n    userReducer,\r\n});\r\n\r\nexport default allReducers;\r\n\r\nexport type RootState = ReturnType<typeof allReducers>;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport {BrowserRouter as Router, Link} from \"react-router-dom\";\r\nimport { createStore } from \"redux\";\r\nimport AuthWrapper from \"./AuthWrapper\";\r\nimport \"./index.css\";\r\nimport allReducers from \"./redux/reducers\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst store = createStore(allReducers);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n        <Router>\r\n            <AuthWrapper />\r\n        </Router>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}